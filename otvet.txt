myapp/admin.py

from django.contrib import admin
from .models import Review, Profile, Company, TransactionModel
from django.http import HttpResponse
import csv
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

from django.templatetags.static import static
import os
from django.contrib.staticfiles import finders
from reportlab.lib.pagesizes import letter, landscape
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.utils import simpleSplit
# Получение пути к шрифту в папке static
# Получение абсолютного пути к шрифту в папке static
# font_path = finders.find('fonts/DejaVuSans.ttf')

# if font_path:
#     pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
# else:
#     raise FileNotFoundError("Font file 'DejaVuSans.ttf' not found in static files.")
# Получение абсолютного пути к шрифту в папке static
font_path = finders.find('fonts/FreeSerif.ttf')

if font_path:
    pdfmetrics.registerFont(TTFont('FreeSerif', font_path))
else:
    raise FileNotFoundError("Font file 'FreeSerif.ttf' not found in static files.")

class ReviewAdmin(admin.ModelAdmin):
    list_display = ('service', 'topic', 'author', 'timestamp', 'rating')
    actions = ['export_as_csv', 'export_as_pdf']

    def export_as_csv(self, request, queryset):
        meta = self.model._meta
        field_names = [field.name for field in meta.fields]

        response = HttpResponse(content_type='text/csv; charset=utf-8-sig')
        response['Content-Disposition'] = 'attachment; filename="{}.csv"'.format(meta)
        writer = csv.writer(response)

        writer.writerow(field_names)
        for obj in queryset:
            row = writer.writerow([getattr(obj, field) for field in field_names])

        return response

    export_as_csv.short_description = "Export Selected as CSV"

    def export_as_pdf(self, request, queryset):
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = 'attachment; filename="reviews.pdf"'

        p = canvas.Canvas(response, pagesize=letter)
        p.setFont("FreeSerif", 12)  # Использование шрифта
        width, height = letter

        y = height - 30
        for review in queryset:
            p.drawString(30, y, f"Service: {review.service}")
            p.drawString(30, y - 15, f"Topic: {review.topic}")
            p.drawString(30, y - 30, f"Author: {review.author.username}")
            p.drawString(30, y - 45, f"Timestamp: {review.timestamp}")
            p.drawString(30, y - 60, f"Rating: {review.rating}")
            y -= 90
            if y < 30:
                p.showPage()
                p.setFont("FreeSerif", 12) 
                y = height - 30

        p.save()
        return response

    export_as_pdf.short_description = "Export Selected as PDF"


class TransactionAdmin(admin.ModelAdmin):
    list_display = ('sender', 'recipient', 'amount', 'timestamp')

    def total_mined(self, request):
        total_mined = sum(transaction.amount for transaction in TransactionModel.objects.filter(sender="Система"))
        total_bonus = sum(transaction.amount for transaction in TransactionModel.objects.filter(sender="Система", recipient="admin"))
        total_given = sum(transaction.amount for transaction in TransactionModel.objects.exclude(sender="Система"))
        return total_mined, total_given, total_bonus

    def changelist_view(self, request, extra_context=None):
        total_mined, total_given, total_bonus = self.total_mined(request)
        extra_context = extra_context or {}
        extra_context['total_mined'] = total_mined
        extra_context['total_given'] = total_given
        extra_context['total_bonus'] = total_bonus
        return super().changelist_view(request, extra_context=extra_context)


class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'balance', 'rating', 'bonus_balance')
    search_fields = ('user__username', 'user__email')  # Позволяет искать по имени пользователя и email
    list_filter = ('rating',)  # Добавляет фильтр по рейтингу справа

# Функция для экспорта в CSV
def export_as_csv(modeladmin, request, queryset):
    meta = modeladmin.model._meta
    field_names = [field.name for field in meta.fields]

    response = HttpResponse(content_type='text/csv; charset=utf-8-sig')
    response['Content-Disposition'] = 'attachment; filename="{}.csv"'.format(meta)
    writer = csv.writer(response)

    writer.writerow(field_names)
    for obj in queryset:
        row = writer.writerow([getattr(obj, field) for field in field_names])

    return response
export_as_csv.short_description = "Export Selected as CSV"

# Функция для экспорта в PDF
def export_as_pdf(modeladmin, request, queryset):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="{}.pdf"'.format(modeladmin.model._meta.model_name)

    p = canvas.Canvas(response, pagesize=letter)
    p.setFont("FreeSerif", 12)  # Использование шрифта
    width, height = letter
    y = height - 30

    for obj in queryset:
        for field_name in modeladmin.list_display:
            value = getattr(obj, field_name, "")
            if isinstance(value, str):
                value = value.encode('utf-8').decode('utf-8')  # Убедитесь, что строка в формате UTF-8
            p.drawString(30, y, f"{field_name}: {value}")
            y -= 15
            if y < 40:
                p.showPage()
                p.setFont("FreeSerif", 12)  # Установите шрифт для новой страницы
                y = height - 30

    p.save()
    return response

export_as_pdf.short_description = "Export Selected as PDF"

# Админ-класс для Company
class CompanyAdmin(admin.ModelAdmin):
    list_display = ('name', 'rating')
    actions = [export_as_csv, export_as_pdf]

# Админ-класс для TransactionModel
class TransactionModelAdmin(admin.ModelAdmin):
    list_display = ('sender', 'recipient', 'amount', 'timestamp')
    actions = [export_as_csv, export_as_pdf]

# Админ-класс для Profile
class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'balance', 'rating', 'bonus_balance')
    actions = [export_as_csv, export_as_pdf]

admin.site.register(TransactionModel, TransactionAdmin)
admin.site.register(Review, ReviewAdmin)
admin.site.register(Profile, ProfileAdmin)
admin.site.register(Company, CompanyAdmin)

myapp/apps

from django.apps import AppConfig


class MyappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'myapp'


myapp/forms

from django import forms
from .models import Review, Profile
from django.contrib.auth.forms import UserChangeForm, PasswordChangeForm
from django.contrib.auth.models import User

# class ReviewForm(forms.ModelForm):
#     class Meta:
#         model = Review
#         fields = ['service', 'topic', 'text', 'is_anonymous', 'rating']
class ReviewForm(forms.ModelForm):
    class Meta:
        model = Review
        fields = ['service', 'topic', 'text', 'is_anonymous', 'rating', 'image', 'video']

class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['email']

class PasswordChangingForm(PasswordChangeForm):
    class Meta:
        model = User
        fields = ('old_password', 'new_password1', 'new_password2')

myapp/views

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm, PasswordResetForm
from django.contrib.auth import login as auth_login, logout as auth_logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.core.mail import send_mail, BadHeaderError
from django.http import HttpResponse
from django.template.loader import render_to_string
from django.contrib.auth.tokens import default_token_generator
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.contrib.sites.shortcuts import get_current_site
from django.conf import settings
from .models import Review, Profile, answer_coin, Transaction, Company
from .models import Review, Profile, answer_coin, TransactionModel, Company
from .forms import ReviewForm, ProfileUpdateForm
from django.contrib.auth.models import User  
from django.core.exceptions import PermissionDenied  
from django.http import JsonResponse
from .models import Review
from django.db.models import Q
from django.contrib.auth import views as auth_views
from django.views.i18n import set_language
from django.shortcuts import redirect

def my_set_language(request):
    response = set_language(request)
    language = request.GET.get('language', None)
    if language:
        return redirect(f'/{language}/') # Перенаправление на URL с префиксом языка
    return response
##
def calculate_reward(user, review):
    R_user = user.profile.rating
    L = len(review.text)
    R_company = review.company.rating
    S_user = review.rating
    K_score = 0.5 if S_user in [1, 2, 9, 10] else 1.5
    B_reviews = 50  # This can be adjusted based on the number of reviews

    reward = (R_user * L * R_company * K_score) + B_reviews
    return reward


# @login_required
# def edit_review(request, review_id):
#     review = get_object_or_404(Review, id=review_id)
#     if review.author != request.user:
#         raise PermissionDenied

#     if request.method == 'POST':
#         form = ReviewForm(request.POST, instance=review)
#         if form.is_valid():
#             form.save()
#             return redirect('profile', username=request.user.username)
#     else:
#         form = ReviewForm(instance=review)
#     return render(request, 'edit_review.html', {'form': form})

def company_ratings(request):
    #companies = Company.objects.all()
    companies = Company.objects.all().order_by('-rating')
    return render(request, 'company_ratings.html', {'companies': companies})


# def load_more_reviews(request):
#     offset = int(request.GET.get('offset', 0))
#     limit = int(request.GET.get('limit', 8))
#     reviews = Review.objects.all()[offset: offset + limit]
#     reviews_data = [{
#         'author': 'Анонимно' if review.is_anonymous else review.author.username,
#         'text': review.text,
#         'service': review.service,
#         'rating': review.rating  # Добавляем рейтинг
#     } for review in reviews]
#     return JsonResponse({'reviews': reviews_data})

# def search_reviews(request):
#     query = request.GET.get('query', '')
#     reviews = Review.objects.filter(service__icontains=query)[:8]  # Ограничиваем количество результатов
#     reviews_data = [{
#         'author': 'Анонимно' if review.is_anonymous else review.author.username,
#         'text': review.text,
#         'service': review.service,
#         'rating': review.rating  # Добавляем рейтинг
#     } for review in reviews]
#     return JsonResponse({'reviews': reviews_data})

def load_more_reviews(request):
    offset = int(request.GET.get('offset', 0))
    limit = int(request.GET.get('limit', 8))
    reviews = Review.objects.all().order_by('-timestamp')[offset: offset + limit]
    reviews_data = [{
        'author': 'Анонимно' if review.is_anonymous else review.author.username,
        'text': review.text,
        'service': review.service,
        'rating': review.rating,  # Добавляем рейтинг
        'image': review.image.url if review.image else None
        #'image': review.image
    } for review in reviews]
    return JsonResponse({'reviews': reviews_data})

def search_reviews(request):
    query = request.GET.get('query', '')
    reviews = Review.objects.filter(service__icontains=query).order_by('-timestamp')[:8]  # Ограничиваем количество результатов
    reviews_data = [{
        'author': 'Анонимно' if review.is_anonymous else review.author.username,
        'text': review.text,
        'service': review.service,
        'rating': review.rating,  # Добавляем рейтинг
        'image': review.image.url if review.image else None
        #'image': review.image
    } for review in reviews]
    return JsonResponse({'reviews': reviews_data})

def api_reviews(request):
    page = int(request.GET.get('page', 1))
    reviews_per_page = 8
    start = (page - 1) * reviews_per_page
    end = start + reviews_per_page
    reviews = Review.objects.all()[start:end]
    reviews_data = [{
        'author': 'Анонимно' if review.is_anonymous else review.author.username,
        'text': review.text,
        'service': review.service
    } for review in reviews]
    return JsonResponse({'reviews': reviews_data})

def index(request):
    reviews = Review.objects.all().order_by('-timestamp')
    context = {'reviews': reviews}
    return render(request, 'index.html', context)

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            auth_login(request, user)
            messages.success(request, 'Регистрация прошла успешно!')
            return redirect('/')
    else:
        form = UserCreationForm()
    return render(request, 'accounts/register.html', {'form': form})


def login(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            auth_login(request, form.get_user())
            return redirect('profile', username=request.user.username)
    else:
        form = AuthenticationForm()
    return render(request, 'accounts/login.html', {'form': form})


from .models import Review, Profile, answer_coin, TransactionModel, Company, Transaction
from datetime import timedelta
from django.utils import timezone
from django.contrib import messages

# @login_required
# def add_review(request):
#     if request.method == 'POST':
#         form = ReviewForm(request.POST)
#         if form.is_valid():
#             service = form.cleaned_data['service']
#             # Проверка на существование отзыва за последние 15 дней
#             recent_review = Review.objects.filter(
#                 author=request.user,
#                 service=service,
#                 timestamp__gte=timezone.now() - timedelta(days=15)
#             ).exists()

#             if recent_review:
#                 messages.error(request, 'You can only leave one review for the same service every 15 days.')
#                 return redirect('add_review')

#             review = form.save(commit=False)
#             review.author = request.user
#             review.save()

#             reward = calculate_reward(request.user, review)
#             request.user.profile.balance += reward
#             request.user.profile.save()

#             # Сохранение транзакции в базе данных
#             transaction_model = TransactionModel(sender="Система", recipient=request.user.username, amount=reward)
#             transaction_model.save()

#             # Конвертация TransactionModel в Transaction
#             transaction = transaction_model.to_transaction()
#             answer_coin.add_transaction(transaction)
#             mined_block = answer_coin.mine_block(miner_address="Майнер")
#             if answer_coin.add_block(mined_block):
#                 print(f"Блок {mined_block.index} добавлен в блокчейн!")

#                 # Добавляем бонус за каждый 10-й отзыв
#                 if len(answer_coin.chain) % 10 == 0:
#                     bonus_transaction_model = TransactionModel(sender="Система", recipient="admin", amount=100000)
#                     bonus_transaction_model.save()
#                     bonus_transaction = bonus_transaction_model.to_transaction()
#                     answer_coin.add_transaction(bonus_transaction)
#                     mined_block = answer_coin.mine_block(miner_address="Майнер")
#                     if answer_coin.add_block(mined_block):
#                         print(f"Бонусный блок {mined_block.index} добавлен в блокчейн!")
#                         admin_user = User.objects.get(username="admin")
#                         admin_user.profile.bonus_balance += 100000
#                         admin_user.profile.save()

#             return redirect('profile', username=request.user.username)
#     else:
#         form = ReviewForm()
#     return render(request, 'add_review.html', {'form': form})

# @login_required
# def add_review(request):
#     if request.method == 'POST':
#         form = ReviewForm(request.POST, request.FILES)
#         if form.is_valid():
#             service = form.cleaned_data['service']
#             # Проверка на существование отзыва за последние 15 дней
#             recent_review = Review.objects.filter(
#                 author=request.user,
#                 service=service,
#                 timestamp__gte=timezone.now() - timedelta(days=15)
#             ).exists()

#             if recent_review:
#                 messages.error(request, 'You can only leave one review for the same service every 15 days.')
#                 return redirect('add_review')

#             review = form.save(commit=False)
#             review.author = request.user
#             review.save()

#             reward = calculate_reward(request.user, review)
#             request.user.profile.balance += reward
#             request.user.profile.save()

#             # Сохранение транзакции в базе данных
#             transaction_model = TransactionModel(sender="Система", recipient=request.user.username, amount=reward)
#             transaction_model.save()

#             # Конвертация TransactionModel в Transaction
#             transaction = transaction_model.to_transaction()
#             answer_coin.add_transaction(transaction)
#             mined_block = answer_coin.mine_block(miner_address="Майнер")
#             if answer_coin.add_block(mined_block):
#                 print(f"Блок {mined_block.index} добавлен в блокчейн!")

#                 # Добавляем бонус за каждый 10-й отзыв
#                 if len(answer_coin.chain) % 10 == 0:
#                     bonus_transaction_model = TransactionModel(sender="Система", recipient="admin", amount=100000)
#                     bonus_transaction_model.save()
#                     bonus_transaction = bonus_transaction_model.to_transaction()
#                     answer_coin.add_transaction(bonus_transaction)
#                     mined_block = answer_coin.mine_block(miner_address="Майнер")
#                     if answer_coin.add_block(mined_block):
#                         print(f"Бонусный блок {mined_block.index} добавлен в блокчейн!")
#                         admin_user = User.objects.get(username="admin")
#                         admin_user.profile.bonus_balance += 100000
#                         admin_user.profile.save()

#             return redirect('profile', username=request.user.username)
#     else:
#         form = ReviewForm()
#     return render(request, 'add_review.html', {'form': form})
from django.core.exceptions import ValidationError

@login_required
def add_review(request):
    if request.method == 'POST':
        form = ReviewForm(request.POST, request.FILES)
        if form.is_valid():
            try:
                service = form.cleaned_data['service']
                # Проверка на существование отзыва за последние 15 дней
                recent_review = Review.objects.filter(
                    author=request.user,
                    service=service,
                    timestamp__gte=timezone.now() - timedelta(days=15)
                ).exists()

                if recent_review:
                    messages.error(request, 'You can only leave one review for the same service every 15 days.')
                    return redirect('add_review')

                review = form.save(commit=False)
                review.author = request.user
                review.save()

                reward = calculate_reward(request.user, review)
                request.user.profile.balance += reward
                request.user.profile.save()

                # Сохранение транзакции в базе данных
                transaction_model = TransactionModel(sender="Система", recipient=request.user.username, amount=reward)
                transaction_model.save()

                # Конвертация TransactionModel в Transaction
                transaction = transaction_model.to_transaction()
                answer_coin.add_transaction(transaction)
                mined_block = answer_coin.mine_block(miner_address="Майнер")
                if answer_coin.add_block(mined_block):
                    print(f"Блок {mined_block.index} добавлен в блокчейн!")

                    # Добавляем бонус за каждый 10-й отзыв
                    if len(answer_coin.chain) % 10 == 0:
                        bonus_transaction_model = TransactionModel(sender="Система", recipient="admin", amount=100000)
                        bonus_transaction_model.save()
                        bonus_transaction = bonus_transaction_model.to_transaction()
                        answer_coin.add_transaction(bonus_transaction)
                        mined_block = answer_coin.mine_block(miner_address="Майнер")
                        if answer_coin.add_block(mined_block):
                            print(f"Бонусный блок {mined_block.index} добавлен в блокчейн!")
                            admin_user = User.objects.get(username="admin")
                            admin_user.profile.bonus_balance += 100000
                            admin_user.profile.save()

                return redirect('profile', username=request.user.username)
            except ValidationError as e:
                messages.error(request, str(e))
    else:
        form = ReviewForm()
    return render(request, 'add_review.html', {'form': form})

@login_required
def edit_review(request, review_id):
    review = get_object_or_404(Review, id=review_id)
    if review.author != request.user:
        raise PermissionDenied

    if request.method == 'POST':
        form = ReviewForm(request.POST, request.FILES, instance=review)
        if form.is_valid():
            form.save()
            return redirect('profile', username=request.user.username)
    else:
        form = ReviewForm(instance=review)
    return render(request, 'edit_review.html', {'form': form})

def password_reset_request(request):
    if request.method == "POST":
        password_reset_form = PasswordResetForm(request.POST)
        if password_reset_form.is_valid():
            data = password_reset_form.cleaned_data['email']
            associated_users = User.objects.filter(email=data)
            if associated_users.exists():
                for user in associated_users:
                    subject = "Запрос на сброс пароля"
                    email_template_name = "accounts/password_reset_email.txt"
                    c = {
                        "email": user.email,
                        'domain': get_current_site(request).domain,
                        'site_name': 'Website',
                        "uid": urlsafe_base64_encode(force_bytes(user.pk)),
                        "user": user,
                        'token': default_token_generator.make_token(user),
                        'protocol': 'https' if request.is_secure() else 'http',
                    }
                    email = render_to_string(email_template_name, c)
                    try:
                        send_mail(subject, email, settings.EMAIL_HOST_USER, [user.email], fail_silently=False)
                    except BadHeaderError:
                        return HttpResponse('Invalid header found.')
                    return redirect ("/accounts/password_reset/done/")
    password_reset_form = PasswordResetForm()
    return render(request=request, template_name="accounts/password_reset.html", context={"password_reset_form":password_reset_form})

@login_required
def edit_profile(request, username):
    user = get_object_or_404(User, username=username)
    if request.user != user and not request.user.is_superuser:
        raise PermissionDenied
    
    if request.method == 'POST':
        form = ProfileUpdateForm(request.POST, instance=user)
        if form.is_valid():
            form.save()
            return redirect('profile', username=username)
    else:
        form = ProfileUpdateForm(instance=user)
    return render(request, 'edit_profile.html', {'form': form})

@login_required
def profile(request, username):
    user = get_object_or_404(User, username=username)
    if request.user != user and not request.user.is_superuser:
        raise PermissionDenied
    reviews = Review.objects.filter(author=user).order_by('-timestamp')
    return render(request, 'profile.html', {'user': user, 'reviews': reviews})

@login_required
def delete_review(request, review_id):
    review = get_object_or_404(Review, id=review_id)
    if review.author == request.user:
        review.delete()
        messages.success(request, 'Review deleted successfully.')
    else:
        messages.error(request, 'You do not have permission to delete this review.')
    return redirect('profile', username=request.user.username)

myapp/models

from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
import hashlib
import datetime
import json

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.pending_transactions = []
        self.difficulty = 4
        self.mining_reward = 10000  # Обновлено для 10000 монет
        self.bonus_reward = 100000  # Бонус за каждый 10-й блок
        self.admin_address = "admin"  # Адрес администратора

    def create_genesis_block(self):
        return Block(0, "0", [], datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

    def get_last_block(self):
        return self.chain[-1]

    def add_block(self, block):
        if self.is_valid_block(block, self.get_last_block()):
            self.chain.append(block)
            return True
        return False

    def is_valid_block(self, block, previous_block):
        if previous_block.hash != block.previous_hash:
            return False
        if block.index != previous_block.index + 1:
            return False
        if not self.is_valid_proof(block):
            return False
        return True

    def is_valid_proof(self, block):
        return block.hash.startswith("0" * self.difficulty)

    def mine_block(self, miner_address):
        block = Block(
            index=len(self.chain),
            previous_hash=self.get_last_block().hash,
            transactions=self.pending_transactions,
            timestamp=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        self.pending_transactions.append(Transaction(None, miner_address, self.mining_reward))
        
        # Добавляем бонус каждые 10 блоков
        if len(self.chain) % 10 == 0:
            self.pending_transactions.append(Transaction(None, self.admin_address, self.bonus_reward))

        block.nonce = 0
        while not self.is_valid_proof(block):
            block.nonce += 1
            block.hash = block.calculate_hash()
        self.pending_transactions = []  # Очистка списка транзакций после майнинга блока
        return block

    def add_transaction(self, transaction):
        self.pending_transactions.append(transaction)

class Transaction:
    def __init__(self, sender, recipient, amount):
        self.sender = sender
        self.recipient = recipient
        self.amount = amount
        self.timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        data = f"{self.sender}{self.recipient}{self.amount}{self.timestamp}"
        return hashlib.sha256(data.encode()).hexdigest()

    def to_dict(self):
        return {
            'sender': self.sender,
            'recipient': self.recipient,
            'amount': self.amount,
            'timestamp': self.timestamp,
            'hash': self.hash
        }

class Block:
    def __init__(self, index, previous_hash, transactions, timestamp, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = timestamp
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        transactions_dict = [t.to_dict() for t in self.transactions]
        block_string = json.dumps({
            'index': self.index,
            'previous_hash': self.previous_hash,
            'transactions': transactions_dict,
            'timestamp': self.timestamp,
            'nonce': self.nonce
        }, sort_keys=True)
        return hashlib.sha256(block_string.encode()).hexdigest()

    def to_dict(self):
        return {
            'index': self.index,
            'previous_hash': self.previous_hash,
            'transactions': [t.to_dict() for t in self.transactions],
            'timestamp': self.timestamp,
            'nonce': self.nonce,
            'hash': self.hash
        }


answer_coin = Blockchain()

class Company(models.Model):
    name = models.CharField(max_length=100, unique=True)
    rating = models.FloatField(default=1.0)

    def update_rating(self):
        reviews = self.reviews.all()
        if reviews.exists():
            self.rating = sum(review.rating for review in reviews) / reviews.count()
            self.save()

    def __str__(self):
        return self.name
    


# class Review(models.Model):
#     service = models.CharField(max_length=100)
#     topic = models.CharField(max_length=200)
#     text = models.TextField()
#     author = models.ForeignKey(User, on_delete=models.CASCADE)
#     timestamp = models.DateTimeField(auto_now_add=True)
#     is_anonymous = models.BooleanField(default=False)
#     rating = models.IntegerField(default=1)  # Рейтинг от 1 до 10
#     company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='reviews', null=True, blank=True)

#     def save(self, *args, **kwargs):
#         # Создаем или обновляем компанию
#         company, created = Company.objects.get_or_create(name=self.service)
#         self.company = company
#         super().save(*args, **kwargs)
#         company.update_rating()

#     def __str__(self):
#         return f"{self.topic} by {self.author.username if not self.is_anonymous else 'Anonymous'}"
class Review(models.Model):
    service = models.CharField(max_length=100)
    topic = models.CharField(max_length=200)
    text = models.TextField()
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)
    is_anonymous = models.BooleanField(default=False)
    rating = models.IntegerField(default=1)  # Рейтинг от 1 до 10
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name='reviews', null=True, blank=True)
    image = models.ImageField(upload_to='review_images/', null=True, blank=True)  # Поле для изображения
    video = models.FileField(upload_to='review_videos/', null=True, blank=True)  # Поле для видео

    def save(self, *args, **kwargs):
        # Создаем или обновляем компанию
        company, created = Company.objects.get_or_create(name=self.service)
        self.company = company
        super().save(*args, **kwargs)
        company.update_rating()

    def __str__(self):
        return f"{self.topic} by {self.author.username if not self.is_anonymous else 'Anonymous'}"

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    balance = models.FloatField(default=0.0)
    rating = models.FloatField(default=1.0)  # Рейтинг пользователя
    bonus_balance = models.FloatField(default=0.0)  # Бонусный баланс

    def __str__(self):
        return f"{self.user.username} Profile"
    

@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
        instance.profile.balance = 1.0
        instance.profile.save()
        transaction = Transaction(sender="Система", recipient=instance.username, amount=1.0)
        answer_coin.add_transaction(transaction)
        mined_block = answer_coin.mine_block(miner_address="Майнер")
        if answer_coin.add_block(mined_block):
            print(f"Блок {mined_block.index} добавлен в блокчейн!")

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()

    
from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist, ValidationError

class TransactionModel(models.Model):
    sender = models.CharField(max_length=100)
    recipient = models.CharField(max_length=100)
    amount = models.FloatField()
    timestamp = models.DateTimeField(auto_now_add=True)
    hash = models.CharField(max_length=64, blank=True)

    def save(self, *args, **kwargs):
        if not self.hash:
            self.hash = self.calculate_hash()
        self.process_transaction()
        super().save(*args, **kwargs)

    def calculate_hash(self):
        data = f"{self.sender}{self.recipient}{self.amount}{self.timestamp}"
        return hashlib.sha256(data.encode()).hexdigest()

    def to_transaction(self):
        return Transaction(
            sender=self.sender,
            recipient=self.recipient,
            amount=self.amount
        )

    def process_transaction(self):
        if self.sender != "Система":
            try:
                sender_user = User.objects.get(username=self.sender)
                if self.sender == "admin":
                    if sender_user.profile.bonus_balance < self.amount:
                        raise ValidationError("Insufficient bonus balance")
                    sender_user.profile.bonus_balance -= self.amount
                else:
                    if sender_user.profile.balance < self.amount:
                        raise ValidationError("Insufficient balance")
                    sender_user.profile.balance -= self.amount
                sender_user.profile.save()
            except ObjectDoesNotExist:
                pass

        if self.recipient != "Система":
            try:
                recipient_user = User.objects.get(username=self.recipient)
                recipient_user.profile.balance += self.amount
                recipient_user.profile.save()
            except ObjectDoesNotExist:
                pass

    def __str__(self):
        return f"{self.sender} -> {self.recipient}: {self.amount}"

otzivi/settings

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'your_secret_key'  # Замените на ваш секретный ключ

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]
from django.utils.translation import gettext_lazy as _

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('ru', _('Russian')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Добавьте этот middleware
]
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]

ROOT_URLCONF = 'otzivi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'otzivi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',  # Заменить на:
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'auth.User' # Убедитесь, что эта строка раскомментирована

# Добавь эту строку, если ее еще нет:

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' 
# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

#LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Максимальный размер загружаемого файла (в байтах)
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100 MB

# Максимальный размер загружаемого файла через форму (в байтах)
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100 MB

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# Настройки для отправки email
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
#EMAIL_PORT = 465
EMAIL_PORT = 587
EMAIL_HOST_USER = 'scipiont@gmail.com'  # Замените на ваш реальный адрес Gmail
EMAIL_HOST_PASSWORD = ''  # Замените на ваш пароль

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

otzivi/urls



from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from myapp import views
from django.conf.urls.i18n import i18n_patterns
from django.views.i18n import set_language
from myapp.views import my_set_language
urlpatterns = [
    path('set_language/', my_set_language, name='set_language'),
]



urlpatterns += i18n_patterns(
    path('admin/', admin.site.urls),
    path('', views.index, name='index'),
    path('api/reviews/', views.api_reviews, name='api_reviews'),
    path('accounts/', include('django.contrib.auth.urls')),
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('profile/<str:username>/', views.profile, name='profile'),
    path('add_review/', views.add_review, name='add_review'),
    path('accounts/password_change/done/', auth_views.PasswordChangeDoneView.as_view(template_name='accounts/password_change_done.html'), name='password_change_done'),
    path('accounts/password_reset/', auth_views.PasswordResetView.as_view(template_name='accounts/password_reset_form.html', email_template_name='accounts/password_reset_email.html', subject_template_name='accounts/password_reset_subject.txt', success_url='/accounts/password_reset/done/'), name='password_reset'),
    path('accounts/password_reset/done/', auth_views.PasswordResetDoneView.as_view(template_name='accounts/password_reset_done.html'), name='password_reset_done'),
    path('accounts/reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='accounts/password_reset_confirm.html', success_url='/accounts/reset/done/'), name='password_reset_confirm'),
    path('accounts/reset/done/', auth_views.PasswordResetCompleteView.as_view(template_name='accounts/password_reset_complete.html'), name='password_reset_complete'),
    path('profile/<str:username>/edit/', views.edit_profile, name='edit_profile'),
    path('edit_review/<int:review_id>/', views.edit_review, name='edit_review'),
    path('api/load_more_reviews/', views.load_more_reviews, name='load_more_reviews'),
    path('api/search_reviews/', views.search_reviews, name='search_reviews'),
    path('company_ratings/', views.company_ratings, name='company_ratings'),
    path('delete_review/<int:review_id>/', views.delete_review, name='delete_review'),
    path('change_password/', auth_views.PasswordChangeView.as_view(template_name='accounts/change_password.html'), name='change_password'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


templates/add_review



{% extends 'base.html' %}

{% block title %}Оставить отзыв{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Оставить отзыв</h2>
    {% if messages %}
        <div class="alert alert-danger">
            {% for message in messages %}
                <p>{{ message }}</p>
            {% endfor %}
        </div>
    {% endif %}
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.service.label_tag }} {{ form.service }}
        {{ form.topic.label_tag }} {{ form.topic }}
        {{ form.text.label_tag }} {{ form.text }}
        <div class="form-group">
            <label for="id_is_anonymous">Оставить отзыв анонимно</label>
            {{ form.is_anonymous }}
        </div>
        <div class="form-group">
            <label for="id_rating">Рейтинг (1-9)</label>
            <div class="star-rating">
                {% for i in "987654321"|make_list %}
                <input type="radio" id="star{{ i }}" name="rating" value="{{ i }}" {% if form.rating.value == i %}checked{% endif %}>
                <label for="star{{ i }}" title="{{ i }} звезда"></label>
                {% endfor %}
            </div>
        </div>
        <div class="form-group">
            {{ form.image.label_tag }} {{ form.image }}
        </div>
        <div class="form-group">
            {{ form.video.label_tag }} {{ form.video }}
        </div>
        <button type="submit" class="btn btn-primary">Отправить</button>
    </form>
</div>
{% endblock %}

templates/base.html

<!-- templates/base.html -->
{% load i18n %}
{% load static %}
<!DOCTYPE html>
<html>
<head>
    <title>{% block title %}{% endblock %}</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .gradient-text {
            background: linear-gradient(90deg, blue, red);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: gradient-animation 3s infinite;
        }

        @keyframes gradient-animation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        .star-rating {
            direction: rtl; /* Указываем направление слева направо */
            display: inline-block;
            padding: 20px;
        }

        .star-rating input[type="radio"] {
            display: none; /* Скрываем радио кнопки */
        }

        .star-rating label {
            color: #bbb; /* Цвет звезды по умолчанию */
            font-size: 24px; /* Размер звезд */
            padding: 0;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
        }

        .star-rating label:before {
            content: "\2605"; /* Unicode символ звезды */
            position: relative;
            font-size: 24px;
            color: #393939; /* Цвет звезды по умолчанию */
          
        }

        .star-rating input[type="radio"]:checked ~ label:before,
        .star-rating label:hover ~ label:before,
        .star-rating label:hover:before {
            color: #f2b600; /* Цвет звезды при наведении или выборе */
        }
        .trash-can {
            cursor: pointer;
            width: 20px;
            height: 20px;
            position: relative;
            display: inline-block;
        }

        .trash-can:before, .trash-can:after {
            content: "";
            position: absolute;
            background-color: black;
        }

        .trash-can:before {
            top: 0;
            left: 5px;
            right: 5px;
            height: 4px;
            border-radius: 2px;
        }

        .trash-can:after {
            top: 4px;
            bottom: 2px;
            left: 8px;
            width: 4px;
            background-color: black;
            border-radius: 1px;
        }

        .trash-can i {
            position: absolute;
            top: 4px;
            left: 0;
            right: 0;
            height: 16px;
            border: 2px solid black;
            border-top: none;
            border-radius: 0 0 2px 2px;
        }
        /* .trash-can {
            position: relative;
            display: inline-block;
        } */

        .trash-can:hover .tooltip-text {
            visibility: visible;
        }

        .tooltip-text {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;

            /* Позиционирование */
            position: absolute;
            z-index: 1;
            bottom: 100%;
            left: 50%;
            margin-left: -60px;
        }
        /* Add the following styles to your existing style.css file */

body {
    min-height: 100vh;
    background: linear-gradient(to bottom, black, darkgray);
    font-family: 'Poppins', sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    animation: backgroundFade 115s infinite;
}

.container {
    background-color: rgba(255, 255, 255, 0.8);
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.table-dark {
    background: linear-gradient(to bottom, black, darkgray);
}
.user-name {
    color: #00ffff;
}

@keyframes backgroundFade {
    0%, 100% { background: linear-gradient(to bottom, darkgray, black, darkgray); }
    50% { background: linear-gradient(to bottom, black, darkgray, black); }
}
    </style>
</head>
<body>
    <header>
        <h1><a href="/">{% trans "Reviews about companies and services" %}</a></h1>
    </header>
    {% if user.is_authenticated %}
        <p><a href="{% url 'profile' user.username %}" class="user-name">{{ user.username }}</a>
            <form class="form-format" method="post" action="{% url 'logout' %}"> 
                {% csrf_token %}
                <button type="submit" class="btn btn-danger">{% trans "Exit" %}</button>
            </form>
        </p>
    {% else %}
        <a href="{% url 'login' %}">{% trans "Login" %}</a> |
        <a href="{% url 'register' %}">{% trans "Register" %}</a>
    {% endif %}
    

    {% block content %}{% endblock %}

    <!-- Модальное окно -->
    <div class="modal fade" id="authModal" tabindex="-1" role="dialog" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authModalLabel">{% trans "Вход или Регистрация" %}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>{% trans "Пожалуйста, войдите в систему или зарегистрируйтесь, чтобы оставить отзыв" %}</p>
                    <a href="{% url 'login' %}" class="btn btn-primary gradient-text">{% trans "Login" %}</a>
                    <a href="{% url 'register' %}" class="btn btn-secondary gradient-text">{% trans "Register" %}</a>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function(){
          $('[data-toggle="tooltip"]').tooltip(); 
        });
    </script>
    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

templates/company_ratings

{% extends 'base.html' %}

{% block title %}Рейтинг компаний{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Рейтинг компаний</h2>
    <table class="table table-striped table-dark">
        <thead>
            <tr>
                <th>Компания</th>
                <th>Рейтинг</th>
            </tr>
        </thead>
        <tbody>
            {% for company in companies %}
                <tr>
                    <td>{{ company.name }}</td>
                    <td>{{ company.rating }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

templates/edit_profile

{% extends 'base.html' %}

{% block title %}Редактировать профиль{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Редактировать профиль</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="btn btn-primary">Сохранить изменения</button>
    </form>
    <a href="{% url 'change_password' %}" class="btn btn-secondary mt-3">Изменить пароль</a>
</div>
{% endblock %}

templates/edit_review



{% extends 'base.html' %}

{% block title %}Редактировать отзыв{% endblock %}

{% block content %}
<div class="container mt-5">
    <h2>Редактировать отзыв</h2>
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.service.label_tag }} {{ form.service }}
        {{ form.topic.label_tag }} {{ form.topic }}
        {{ form.text.label_tag }} {{ form.text }}
        <div class="form-group">
            <label for="id_is_anonymous">Оставить отзыв анонимно</label>
            {{ form.is_anonymous }}
        </div>
        <div class="form-group">
            <label for="id_rating">Рейтинг (1-9)</label>
            <div class="star-rating">
                {% for i in "987654321"|make_list %}
                <input type="radio" id="star{{ i }}" name="rating" value="{{ i }}" {% if form.rating.value == i %}checked{% endif %}>
                <label for="star{{ i }}" title="{{ i }} звезда"></label>
                {% endfor %}
            </div>
        </div>
        <div class="form-group">
            {{ form.image.label_tag }} {{ form.image }}
        </div>
        <div class="form-group">
            {{ form.video.label_tag }} {{ form.video }}
        </div>
        <button type="submit" class="btn btn-primary">Сохранить изменения</button>
    </form>
</div>
{% endblock %}

templates/index

<!-- templates/index.html -->
{% load i18n %}
{% load static %}
<!DOCTYPE html>
<html lang="{% get_current_language as LANGUAGE_CODE %}{{ LANGUAGE_CODE }}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% trans "Reviews" %}</title>
    {% load static i18n %}
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
     
        body {
            min-height: 100vh;
            background: linear-gradient(to bottom, black, darkgray);
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            animation: backgroundFade 115s infinite;
        }

        .header {
            margin-bottom: 2%;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            padding: 20px;
            box-sizing: border-box;
        }

        .logo-container {
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            height: 300px;
        }

        .logo, .logo-reflection {
            font-size: 300px;
            font-weight: bold;
            color: #00ff00;
            text-shadow: 0 1px 0 #ccc, 0 2px 0 #c9c9c9, 0 3px 0 #bbb, 0 4px 0 #b9b9b9, 0 5px 0 #aaa, 0 6px 1px rgba(0, 0, 0, 0.1), 0 0 5px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.3), 0 3px 5px rgba(0, 0, 0, 0.2), 0 5px 10px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.2), 0 20px 20px rgba(0, 0, 0, 0.15);
            transition: transform 0.5s ease-in-out;
        }

        .logo-reflection {
            color: #00ffff;
            transform: rotateY(180deg);
        }

        .logo-container:hover .logo {
            transform: rotate(360deg);
        }

        .logo-container:hover .logo-reflection {
            transform: rotate(-360deg);
        }

        .search-bar-container {
            width: 100%;
            display: flex;
            justify-content: center;
            position: sticky;
            top: 0;
            background-color: transparent;
            z-index: 1000;
            padding: 10px 0;
            margin-bottom: 20px; /* Добавлено для отступа от логотипа */
        }

        .search-bar {
            width: 50%;
            max-width: 600px;
            height: 45px;
            border-radius: 25px;
            border: 2px double #00ff00;
            background-color: white;
            padding: 10px 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            font-size: 16px;
            transition: all 0.3s ease;
            color: black; /* Добавлено для изменения цвета текста */
        }

        .search-bar:focus {
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
            outline: none; /* Убедимся, что фокус виден */
        }

        .reviews-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            width: 100%;
            max-width: 600px;
            padding: 20px;
            box-sizing: border-box;
        }

        .review {
            background: white;
            padding: 20px;
            margin: 10px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: calc(33.333% - 20px);
            box-sizing: border-box;
            display: flex;
            flex-direction: column;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .review img {
            max-width: 100%;
            height: auto;
            margin-top: 10px;
            border-radius: 5px;
            display: none; /* Initially hidden */
        }

        .modal-body img {
            max-width: 100%;
            height: auto;
            margin-top: 10px;
            border-radius: 5px;
        }

        .review h3 {
            margin: 0 0 10px;
            font-size: 18px;
            color: #333;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .review p {
            margin: 0;
            font-size: 14px;
            color: #666;
            flex-grow: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .sidebar {
            position: fixed;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            text-align: center;
        }

        .sidebar h2 {
            font-size: 24px;
            color: #00ff00;
            margin-bottom: 20px;
        }

        .sidebar a {
            display: block;
            color: white;
            font-size: 18px;
            margin-bottom: 10px;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .sidebar a:hover {
            color: #00ff00;
        }
        .opinion {
            font-size: 18px;
            color: rgb(255, 255, 255);
        }
        .modal-content {
            border-radius: 10px;
            overflow: hidden;
            transform: scale(0.7);
            transition: transform 0.3s ease-in-out;
        }

        .modal.fade .modal-dialog {
            transform: rotateY(180deg);
            transition: transform 0.5s ease-in-out;
        }

        .modal.show .modal-dialog {
            transform: rotateY(0deg);
        }
        #reviewModal .modal-dialog {
            max-width: 800px; /* Устанавливаем максимальную ширину модального окна */
            margin: 130px auto; /* Центрируем модальное окно */
        }

        #reviewModal .modal-content {
            height: 600px; /* Устанавливаем высоту содержимого модального окна */
            display: flex;
            flex-direction: column; /* Организуем содержимое модального окна в столбец */
        }
        .modal-header {
            background-color: #00ff00;
            color: white;
        }

        .modal-body {
            background-color: #f9f9f9;
        }
        .user-name {
            color: #00ffff;
        }
        .language-switcher {
            position: absolute; /* Позиционируем относительно родителя */
            top: 10px; /* Отступ сверху */
            right: 10px; /* Отступ справа */
        }

        .language-switcher ul {
            list-style: none; /* Убираем маркеры списка */
            margin: 0;
            padding: 0;
        }

        .language-switcher li {
            display: inline-block; /* Располагаем флаги в строку */
            margin-left: 10px; /* Отступ между флагами */
        }

        .language-switcher img {
            width: 30px; /* Устанавливаем ширину флагов */
            height: auto; /* Высота подстраивается автоматически */
        }
        @keyframes backgroundFade {
            0%, 100% { background: linear-gradient(to bottom, darkgray, black, darkgray); }
            50% { background: linear-gradient(to bottom, black, darkgray, black); }
        }
      
      
        @media (max-width: 768px) {
            .review {
                width: calc(50% - 20px);
            }
        }

        @media (max-width: 480px) {
            .review {
                width: calc(100% - 20px);
            }
        }
    </style>
</head>

<body>
    <!-- templates/index.html -->

    <div class="header">
        <div class="logo-container">
            <div class="logo-reflection">R</div>
            <div class="logo">R</div> 
        </div>
        <div class="sidebar">
            <h2>{% trans "Reviews" %}</h2>
            {% if user.is_authenticated %}
                <p class="user-name">{{ user.username }}</p>
                <a href="{% url 'profile' user.username %}">{% trans "Account" %}</a>
                <a href="" id="logout-button">{% trans "Exit" %}</a>
            {% else %}
                <a href="{% url 'login' %}">{% trans "Login" %}</a>
                <a href="{% url 'register' %}">{% trans "Register" %}</a>
            {% endif %}
            <a href="{% url 'company_ratings' %}">{% trans "Company Ratings" %}</a>
        </div>
    </div>
    <div class="opinion">{% trans "Check service or company:" %}</div>
    <div class="search-bar-container">
        <input type="text" class="search-bar" placeholder="{% trans "Search services..." %}" id="search-bar"> 
    </div>
    <div class="reviews-container" id="reviews-container">
        <!-- Reviews will be loaded here -->
    </div>
    {% if user.is_authenticated %}
        <a href="{% url 'add_review' %}" class="add-review">{% trans "Leave review" %}</a>
    {% else %}
        <a href="#" data-toggle="modal" data-target="#authModal" class="add-review">{% trans "Leave review" %}</a>
    {% endif %}

    <!-- Модальное окно -->
    <div class="modal fade" id="authModal" tabindex="-1" role="dialog" aria-labelledby="authModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="authModalLabel">{% trans "Login or Register" %}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>{% trans "Please, login in system or register, to leave a review." %}</p>
                    <a href="{% url 'login' %}" class="btn btn-primary gradient-text">{% trans "Login" %}</a>
                    <a href="{% url 'register' %}" class="btn btn-secondary gradient-text">{% trans "Register" %}</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно для отображения отзыва -->
    <div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-labelledby="reviewModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reviewModalLabel">{% trans "Review" %}</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <h3 id="modal-author"></h3>
                    <p id="modal-text"></p>
                    <p><strong>{% trans "Service:" %}</strong> <span id="modal-service"></span></p>
                    <p><strong>{% trans "Rating:" %}</strong> <span id="modal-rating"></span></p>
                    <img id="modal-image" src="" alt="{% trans "Review Image" %}" style="display: none; max-width: 100%; height: auto; margin-top: 10px; border-radius: 5px;">
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- <div class="language-switcher">
        {% if CURRENT_LANGUAGE != 'en' %}
            <li>
            <a href="{% url 'set_language' %}?language=en" class="language-en">
                <img src="{% static 'images/flags/uk.png' %}" alt="English Flag" />
            </a>
            </li>
        {% endif %}
        {% if CURRENT_LANGUAGE != 'ru' %}
            <li>
            <a href="{% url 'set_language' %}?language=ru" class="language-ru">
                <img src="{% static 'images/flags/ru.png' %}" alt="Russian Flag" />
            </a>
            </li>
        {% endif %}
    </div> -->
  {% load static %}
  <div class="language-switcher">
    <ul>
      {% get_current_language as CURRENT_LANGUAGE %}
  
      <li>
        <a href="{% url 'set_language' %}?language=en" class="language-en">
          <img src="{% static 'images/flags/uk.png' %}" alt="English Flag" />
        </a>
      </li>
      <li>
        <a href="{% url 'set_language' %}?language=ru" class="language-ru">
          <img src="{% static 'images/flags/ru.png' %}" alt="Russian Flag" />
        </a>
      </li>
  
    </ul>
  </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const reviewsContainer = document.getElementById('reviews-container');
            let offset = 0;
            const limit = 8;
            let isLoading = false;

            function loadMoreReviews(reset = false) {
                if (isLoading) return;
                isLoading = true;

                if (reset) {
                    offset = 0;
                    reviewsContainer.innerHTML = '';
                }

                fetch(`/api/load_more_reviews/?offset=${offset}&limit=${limit}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.reviews.length === 0 && !reset) {
                            // No more reviews to load
                            window.removeEventListener('scroll', handleScroll);
                            return;
                        }

                        data.reviews.forEach(review => {
                            const reviewElement = document.createElement('div');
                            reviewElement.classList.add('review');
                            reviewElement.innerHTML = `
                                <h3>${review.author}</h3>
                                <p>${review.text}</p>
                                <p><strong>{% trans "Service:" %}</strong> ${review.service}</p>
                                <p><strong>{% trans "Rating:" %}</strong> ${review.rating}</p>
                            `;
                            reviewElement.addEventListener('click', () => {
                                document.getElementById('modal-author').innerText = review.author;
                                document.getElementById('modal-text').innerText = review.text;
                                document.getElementById('modal-service').innerText = review.service;
                                document.getElementById('modal-rating').innerText = review.rating;
                                const modalImage = document.getElementById('modal-image');
                                if (review.image) {
                                    modalImage.src = review.image;
                                    modalImage.style.display = 'block';
                                } else {
                                    modalImage.style.display = 'none';
                                }
                                $('#reviewModal').modal('show');
                            });
                            reviewsContainer.appendChild(reviewElement);
                        });
                        offset += limit;
                        isLoading = false;
                    })
                    .catch(() => {
                        isLoading = false;
                    });
            }

            function handleScroll() {
                if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 100) {
                    loadMoreReviews();
                }
            }

            function searchReviews(query) {
                fetch(`/api/search_reviews/?query=${query}`)
                    .then(response => response.json())
                    .then(data => {
                        reviewsContainer.innerHTML = '';
                        data.reviews.forEach(review => {
                            const reviewElement = document.createElement('div');
                            reviewElement.classList.add('review');
                            reviewElement.innerHTML = `
                                <h3>${review.author}</h3>
                                <p>${review.text}</p>
                                <p><strong>{% trans "Service:" %}</strong> ${review.service}</p>
                                <p><strong>{% trans "Rating:" %}</strong> ${review.rating}</p>
                            `;
                            reviewElement.addEventListener('click', () => {
                                document.getElementById('modal-author').innerText = review.author;
                                document.getElementById('modal-text').innerText = review.text;
                                document.getElementById('modal-service').innerText = review.service;
                                document.getElementById('modal-rating').innerText = review.rating;
                                const modalImage = document.getElementById('modal-image');
                                if (review.image) {
                                    modalImage.src = review.image;
                                    modalImage.style.display = 'block';
                                } else {
                                    modalImage.style.display = 'none';
                                }
                                $('#reviewModal').modal('show');
                            });
                            reviewsContainer.appendChild(reviewElement);
                        });
                    });
            }

            document.getElementById('search-bar').addEventListener('input', (event) => {
                const query = event.target.value;
                if (query.length > 0) {
                    searchReviews(query);
                } else {
                    loadMoreReviews(true);  // Reset and load initial reviews
                }
            });

            window.addEventListener('scroll', handleScroll);

            // Initial load
            loadMoreReviews();

            // Add event listener for logout button if it exists
            const logoutButton = document.getElementById('logout-button');
            if (logoutButton) {
                logoutButton.addEventListener('click', function(event) {
                    event.preventDefault();
                    fetch("{% url 'logout' %}", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        }
                    }).then(response => {
                        if (response.ok) {
                            window.location.href = "{% url 'index' %}";
                        }
                    });
                });
            }
        });
    </script>
</body>
</html>

templates/profile

<!-- templates/profile.html -->

{% extends 'base.html' %}
{% load i18n %}
{% load static %}
{% block title %}Профиль {{ user.username }}{% endblock %}

{% block content %}
<div class="container mt-5">
    <a href="{% url 'add_review' %}" class="btn btn-primary mt-3">{% trans "Leave review" %}</a>
    {% if request.user == user %}
        <a href="{% url 'edit_profile' user.username %}" class="btn btn-secondary mt-3">{% trans "Edit profile" %}</a>
    {% endif %}
    <a href="{% url 'company_ratings' %}" class="btn btn-secondary mt-3">{% trans "Company Ratings" %}</a>
    <h2>Профиль пользователя: {{ user.username }}</h2>
    <p>Email: {{ user.email }}</p>
    <p>Баланс: {{ user.profile.balance }} AnswerCoin</p>
    <p>Рейтинг: {{ user.profile.rating }}</p>
    <h3>You reviews</h3>
    <ul class="list-group">
        {% for review in reviews %}
            <li class="list-group-item">
                <h4>{{ review.topic }}</h4>
                <p>{{ review.text }}</p>
                <p><strong>Сервис:</strong> {{ review.service }}</p>
                <p><strong>Дата:</strong> {{ review.timestamp }}</p>
                <p><strong>Рейтинг:</strong> {{ review.rating }}</p>
                {% if review.image %}
                    <img src="{{ review.image.url }}" alt="Review Image" style="max-width: 100%;">
                {% endif %}
                {% if review.video %}
                    <video controls style="max-width: 100%;">
                        <source src="{{ review.video.url }}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                {% endif %}
                <a href="{% url 'edit_review' review.id %}" class="btn btn-secondary">{% trans "Edit" %}</a>
                <div class="trash-can" data-toggle="modal" data-target="#deleteModal{{ review.id }}">
                    <i></i>
                    <span class="tooltip-text">Delete review</span>
                </div>
            </li>
            <div class="modal fade" id="deleteModal{{ review.id }}" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteModalLabel">Delete review</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            Are you sure?
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <a href="{% url 'delete_review' review.id %}" class="btn btn-danger">Delete</a>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
    </ul>
</div>
{% endblock %}

templates/admin/change_list

{% extends "admin/change_list.html" %}

{% block content %}
    <div>
        <h2>Total Mined AnswerCoin: {{ total_mined }}</h2>
        <h2>Total Given AnswerCoin: {{ total_given }}</h2>
        <h2>Total Bonus AnswerCoin: {{ total_bonus }}</h2>
    </div>
    {{ block.super }}
{% endblock %}

templates/accounts/login

<!-- templates/accounts/login.html -->
{% load i18n %}
    {% load static %}
<!DOCTYPE html>
<html lang="en">

<head>
    <title>{% trans "Login" %}</title>
    <!--Google Font-->
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;600&display=swap" rel="stylesheet">
    <!--Stylesheet-->
    
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>

<body>
    <form method="post">
        {% csrf_token %}
        <h1>{% trans "Login" %}</h1>
        <input type="text" id="username" name="username" placeholder='{% trans "Enter your username" %}'>
        <label for="username" onclick="expand(this)">{% trans "USERNAME" %}</label>

        <input type="password" id="password" name="password" placeholder='{% trans "Enter your password" %}'>
        <label for="password" onclick="expand(this)">{% trans "Password" %}</label>

        <button type="submit">{% trans "SUBMIT" %}</button>
        <a id="forgot" href="{% url 'password_reset' %}">{% trans "Forgot your password?" %}</a>

    </form>
    
    <!--Script-->
    <script src="{% static 'js/script.js' %}"></script>
</body>

</html>

templates/accounts/register.html

{% extends 'base.html' %}

{% block title %}Регистрация{% endblock %}

{% block content %}
    <h2>Register</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Done</button>
    </form>
{% endblock %}

и файлы связанные с сбросом пароля и прочее.

напиши дипломную работу на основе данного кода. Вот вводные данные:


Разработка веб-приложения на Django и Python быстрых отзывов о сервисах, продуктах, компаниях с применением системы вознаграждений на основе блокчейна. 
  
 Python-разработчик. Специалист:
программист


Содержание
Введение (2-3 стр.)
Глава 1. Теоретические основы разработки веб-приложения с системой вознаграждений на основе блокчейна (15-20 стр.)
1.1. Введение в технологии Django и Python
1.2. Принципы работы с блокчейн-системами
1.3. Разработка систем вознаграждений
1.4. Применение блокчейна в системах отзывов
1.5. Обзор существующих аналогов
Глава 2. Разработка и реализация веб-приложения (25-30 стр.)
2.1. Архитектура приложения: Frontend и Backend
2.2. Разработка базы данных и модели данных
2.3. Реализация функционала добавления отзывов
2.4. Реализация системы вознаграждений на основе блокчейна
2.5. Разработка интерфейса и пользовательского опыта
2.6. Тестирование и отладка
Глава 3. Анализ и оценка разработанного веб-приложения (10-15 стр.)
3.1. Анализ функциональности приложения
3.2. Оценка безопасности и устойчивости приложения
3.3. Экономическая эффективность системы вознаграждений
3.4. Перспективы дальнейшего развития приложения
Заключение (3-4 стр.)
Список используемой литературы
Приложения - https://github.com/scipiont/reviews

Формула расчета вознаграждения . ВВеди ее отдельной главой:

1.	Рейтинг пользователя (R_user): Начальный рейтинг пользователя равен 1 и увеличивается с количеством оставленных отзывов.
2.	Количество символов в отзыве (L): Все символы, напечатанные в комментарии.
3.	Рейтинг компании (R_company): Начальный рейтинг компании равен 1.
4.	Оценка компании пользователем (S_user): Оценка от 1 до 10.
5.	Коэффициенты оценки (K_score):
o	Если оценка 1, 2, 9 или 10, то коэффициент пониженный (например, 0.5).
o	Если оценка от 3 до 8, то коэффициент повышенный (например, 1.5).
6.	Бонус за количество отзывов (B_reviews): Чем больше отзывов, тем выше вероятность получить повышенное вознаграждение.
Формула может выглядеть следующим образом:
[ \text{Reward} = (R_{\text{user}} \times L \times R_{\text{company}} \times K_{\text{score}}) + B_{\text{reviews}} ]
Где:
•	( R_{\text{user}} ) — рейтинг пользователя.
•	( L ) — количество символов в отзыве.
•	( R_{\text{company}} ) — рейтинг компании.
•	( K_{\text{score}} ) — коэффициент оценки.
•	( B_{\text{reviews}} ) — бонус за количество отзывов.
Пример расчета
Допустим, у нас есть следующие данные:
•	Рейтинг пользователя ( R_{\text{user}} = 3 ) (пользователь оставил несколько отзывов и повысил свой рейтинг).
•	Количество символов в отзыве ( L = 250 ).
•	Рейтинг компании ( R_{\text{company}} = 4 ).
•	Оценка компании пользователем ( S_{\text{user}} = 7 ) (коэффициент ( K_{\text{score}} = 1.5 )).
•	Бонус за количество отзывов ( B_{\text{reviews}} = 50 ).
Подставляем данные в формулу:
[ \text{Reward} = (3 \times 250 \times 4 \times 1.5) + 50 ] [ \text{Reward} = (3 \times 250 \times 4 \times 1.5) + 50 ] [ \text{Reward} = (3 \times 250 \times 6) + 50 ] [ \text{Reward} = 4500 + 50 ] [ \text{Reward} = 4550 ]
Таким образом, вознаграждение за этот отзыв составит 4550 единиц (например, токенов в блокчейне).

Опиши подробно каждый пункт. Кроме списка используемой литературы. 

Подробно напиши эти пункты:

1.2. Принципы работы с блокчейн-системами
1.3. Разработка систем вознаграждений
1.4. Применение блокчейна в системах отзывов
1.5. Обзор существующих аналогов